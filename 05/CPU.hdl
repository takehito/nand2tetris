// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
		// decode
		And(a=instruction[15], b=instruction[0], out=checkGreaterThan);
		And(a=instruction[15], b=instruction[1], out=checkZero);
		And(a=instruction[15], b=instruction[2], out=checkNegative);
		And(a=instruction[15], b=instruction[3], out=writeM); 
		And(a=instruction[15], b=instruction[4], out=writeD);
		And(a=instruction[15], b=instruction[5], out=writeA);
		And(a=instruction[15], b=instruction[6], out=negateOut);
		And(a=instruction[15], b=instruction[7], out=funcAddOrAnd);
		And(a=instruction[15], b=instruction[8], out=negateY);
		And(a=instruction[15], b=instruction[9], out=inputYToZero);
		And(a=instruction[15], b=instruction[10], out=negateX);
		And(a=instruction[15], b=instruction[11], out=inputXToZero);
		And(a=instruction[15], b=instruction[12], out=MorA);

		Mux16(a=instruction, b=alu, sel=instruction[15], out=mux1);

		Not(in=instruction[15], out=isAOperation);
		Or(a=isAOperation, b=writeA, out=doARegister);
		ARegister(in=mux1, load=doARegister, out=a1, out[0..14]=addressM, out=a2);

		Mux16(a=a1, b=inM, sel=MorA, out=mux2);

		DRegister(in=alu, load=writeD, out=d);

		ALU(
		x=d,
		y=mux2,
		zx=inputXToZero,
		nx=negateX,
		zy=inputYToZero,
		ny=negateY,
		f=funcAddOrAnd,
		no=negateOut,
	 	out=alu,
		out=outM,
		zr=zr,
		ng=ng);

		And(a=checkNegative, b=ng, out=ngjump);
		And(a=checkZero, b=zr, out=zrjump);

		Not(in=zr, out=notzr);
		Not(in=ng, out=notng);
		And(a=notzr, b=notng, out=gt);
		And(a=checkGreaterThan, b=gt, out=gtjump);

		Or(a=ngjump, b=zrjump, out=ngorzrjump);
		Or(a=ngorzrjump, b=gtjump, out=dojump);

		PC(in=a2, inc=true, load=dojump, reset=reset, out[0..14]=pc);
}
